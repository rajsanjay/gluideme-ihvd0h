name: Production Deployment

# Trigger on main branch pushes, releases, or manual dispatch
on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:

# Environment and concurrency configuration
env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: transfer-requirements
  ECS_CLUSTER: production-cluster
  ECS_SERVICE: production-service
  TERRAFORM_VERSION: '1.5.0'
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  COMPLIANCE_LEVEL: 'FERPA'

# Prevent concurrent deployments to production
concurrency:
  group: production
  cancel-in-progress: false

# Required permissions for deployment
permissions:
  id-token: write
  contents: read
  packages: write
  deployments: write
  security-events: write
  actions: read
  checks: write

jobs:
  # Security scanning job
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SAST analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: ['python', 'javascript', 'typescript']
          queries: security-extended
          config-file: ./.github/codeql/codeql-config.yml

      - name: Check dependencies
        uses: snyk/actions/python@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Scan container images
        uses: aquasecurity/trivy-action@v1
        with:
          scan-type: 'fs,config'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: FERPA compliance check
        run: |
          python3 .github/scripts/compliance_check.py \
            --level ${{ env.COMPLIANCE_LEVEL }} \
            --report-file compliance-report.json

  # Testing job
  test:
    name: Run Tests
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          pip install -r src/backend/requirements.txt
          npm ci --prefix src/web

      - name: Run backend tests
        run: |
          pytest src/backend/tests \
            --cov=src/backend \
            --cov-report=xml \
            --junitxml=test-results/backend.xml

      - name: Run frontend tests
        run: |
          npm test --prefix src/web -- \
            --coverage \
            --ci \
            --reporters=default --reporters=jest-junit

      - name: Run integration tests
        run: |
          python -m pytest src/tests/integration \
            --junitxml=test-results/integration.xml

  # Build and push container images
  build-and-push:
    name: Build Images
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend
          file: ./src/backend/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REPOSITORY }}/backend:${{ github.sha }}
            ${{ env.ECR_REPOSITORY }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./src/web
          file: ./src/web/Dockerfile
          push: true
          tags: |
            ${{ env.ECR_REPOSITORY }}/frontend:${{ github.sha }}
            ${{ env.ECR_REPOSITORY }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy infrastructure changes
  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: infrastructure/terraform/environments/prod
        run: terraform init

      - name: Terraform Plan
        working-directory: infrastructure/terraform/environments/prod
        run: |
          terraform plan \
            -var="environment=production" \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -out=tfplan

      - name: Manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: devops-team,security-team
          minimum-approvals: 2
          timeout: 3600

      - name: Terraform Apply
        working-directory: infrastructure/terraform/environments/prod
        run: terraform apply -auto-approve tfplan

  # Deploy application
  deploy-application:
    name: Deploy Application
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Health check
        run: |
          python3 .github/scripts/health_check.py \
            --environment production \
            --timeout 300

      - name: Verify deployment
        run: |
          python3 .github/scripts/verify_deployment.py \
            --version ${{ github.sha }} \
            --environment production

# Notification configuration
notifications:
  slack:
    on_success: always
    on_failure: always
    channels:
      - '#production-deployments'
      - '#security-alerts'
  email:
    on_failure: true
    recipients:
      - devops-team@company.com
      - security-team@company.com

# Artifact retention
artifacts:
  logs:
    paths:
      - test-results/
      - security-scan/
      - compliance-checks/
    retention:
      days: 30