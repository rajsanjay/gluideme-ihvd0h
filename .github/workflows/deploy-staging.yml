name: Staging Deployment

# Trigger configuration
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

# Environment configuration
env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: transfer-requirements
  ECS_CLUSTER: staging-cluster
  ECS_SERVICE: staging-service
  TERRAFORM_VERSION: '1.5.0'
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: '1'

# Concurrency control to prevent multiple deployments
concurrency:
  group: staging
  cancel-in-progress: true

# Required permissions for OIDC authentication
permissions:
  id-token: write
  contents: read
  packages: write
  deployments: write
  security-events: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: src/backend/requirements.txt

      - name: Install frontend dependencies
        working-directory: src/web
        run: npm ci

      - name: Install backend dependencies
        working-directory: src/backend
        run: pip install -r requirements.txt

      - name: Run frontend tests
        working-directory: src/web
        run: |
          npm run lint
          npm run test -- --coverage

      - name: Run backend tests
        working-directory: src/backend
        run: |
          python -m pytest tests/ --cov=apps --cov-report=xml

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: test-coverage
          path: |
            src/web/coverage
            src/backend/coverage.xml
          retention-days: 14

  build-and-push:
    name: Build and Push Images
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-staging
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./src/backend
          file: ./src/backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}/backend:staging
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./src/web
          file: ./src/web/Dockerfile
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}/frontend:staging
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_ENVIRONMENT=staging

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-staging
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: infrastructure/terraform/environments/staging
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=staging/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        working-directory: infrastructure/terraform/environments/staging
        run: |
          terraform plan \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -var="environment=staging" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: infrastructure/terraform/environments/staging
        run: terraform apply -auto-approve tfplan

  deploy-application:
    name: Deploy Application
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-staging
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Run health checks
        run: |
          endpoint="${{ secrets.HEALTH_CHECK_URL }}"
          max_retries=30
          count=0
          
          until curl -s -f "$endpoint" > /dev/null; do
            count=$((count + 1))
            if [ $count -eq $max_retries ]; then
              echo "Health check failed after $max_retries attempts"
              exit 1
            fi
            echo "Waiting for service to be healthy..."
            sleep 10
          done
          
          echo "Service is healthy"

      - name: Create deployment status
        if: always()
        uses: actions/create-deployment-status@v1
        with:
          state: ${{ job.status == 'success' && 'success' || 'failure' }}
          environment_url: ${{ secrets.STAGING_URL }}
          description: Staging deployment ${{ job.status }}