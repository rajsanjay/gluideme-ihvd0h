version: '3.8'

services:
  # Django API Service
  api:
    image: backend_api
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MEILISEARCH_HOST=http://meilisearch:7700
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc
    volumes:
      - .:/app
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - prometheus_multiproc:/tmp/prometheus_multiproc
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - backend_network

  # Celery Worker Service
  celery_worker:
    image: backend_api
    command: celery -A celery.app worker --loglevel=info
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc
    volumes:
      - .:/app
      - prometheus_multiproc:/tmp/prometheus_multiproc
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - backend_network

  # Redis Cache Service
  redis:
    image: redis:7.0-alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ../infrastructure/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - backend_network

  # MeiliSearch Service
  meilisearch:
    image: getmeili/meilisearch:v1.3
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
      - MEILI_NO_ANALYTICS=true
      - MEILI_ENV=production
    volumes:
      - meilisearch_data:/meili_data
    ports:
      - "7700:7700"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - backend_network

volumes:
  redis_data:
    name: transfer_requirements_redis_data
  meilisearch_data:
    name: transfer_requirements_meilisearch_data
  static_volume:
    name: transfer_requirements_static
  media_volume:
    name: transfer_requirements_media
  prometheus_multiproc:
    name: transfer_requirements_prometheus

networks:
  backend_network:
    name: transfer_requirements_backend
    driver: bridge